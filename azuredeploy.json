{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "FunctionAppName": {
      "type": "string",
      "defaultValue": "",
      "metadata": { "description": "Function App name (unique in *.azurewebsites.net). Leave blank to auto-generate." }
    },
    "EXO_ORG": {
      "type": "string",
      "metadata": { "description": "Exchange Online tenant (e.g., contoso.onmicrosoft.com)" }
    }
  },
  "variables": {
    "functionNameFallback": "[concat('quarantinerelease', uniqueString(resourceGroup().id))]",
    "functionNameRaw": "[if(greater(length(parameters('FunctionAppName')), 0), parameters('FunctionAppName'), variables('functionNameFallback'))]",
    "functionName": "[toLower(variables('functionNameRaw'))]",
    "nameAlnum1": "[replace(variables('functionName'), '-', '')]",
    "nameAlnum2": "[replace(variables('nameAlnum1'), '_', '')]",
    "nameAlnum3": "[replace(variables('nameAlnum2'), '.', '')]",
    "storageAccountName": "[concat(substring(variables('nameAlnum3'), 0, 18), 'sa', substring(uniqueString(resourceGroup().id), 0, 4))]",
    "hostingPlanName": "[concat('ASP-', variables('functionName'))]",
    "storageSuffix": "[environment().suffixes.storage]",
    "templateBaseUri": "[uri(deployment().properties.templateLink.uri, '.')]",
    "packageUri": "[uri(variables('templateBaseUri'), 'QuarantineRelease.zip')]"
  },
  "resources": [
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2015-05-01",
      "name": "[variables('functionName')]",
      "location": "[resourceGroup().location]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "ApplicationId": "[variables('functionName')]"
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2018-02-01",
      "name": "[variables('hostingPlanName')]",
      "location": "[resourceGroup().location]",
      "kind": "elastic",
      "sku": { "tier": "ElasticPremium", "name": "EP1" },
      "properties": {
        "reserved": true,
        "targetWorkerCount": "2",
        "targetWorkerSizeId": "3",
        "maximumElasticWorkerCount": "20"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-06-01",
      "name": "[variables('storageAccountName')]",
      "location": "[resourceGroup().location]",
      "sku": { "name": "Standard_LRS", "tier": "Standard" },
      "kind": "StorageV2",
      "properties": {
        "supportsHttpsTrafficOnly": true,
        "networkAcls": { "bypass": "AzureServices", "defaultAction": "Allow" },
        "encryption": {
          "services": {
            "file": { "enabled": true, "keyType": "Account" },
            "blob": { "enabled": true, "keyType": "Account" }
          },
          "keySource": "Microsoft.Storage"
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2019-06-01",
      "name": "[concat(variables('storageAccountName'), '/default')]",
      "dependsOn": [ "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]" ],
      "sku": { "name": "Standard_LRS", "tier": "Standard" },
      "properties": { "cors": { "corsRules": [] }, "deleteRetentionPolicy": { "enabled": false } }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
      "apiVersion": "2019-06-01",
      "name": "[concat(variables('storageAccountName'), '/default/', tolower(variables('functionName')))]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ],
      "properties": { "shareQuota": 5120 }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2018-11-01",
      "name": "[variables('functionName')]",
      "location": "[resourceGroup().location]",
      "kind": "functionapp,linux",
      "identity": { "type": "SystemAssigned" },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
        "[resourceId('Microsoft.Insights/components', variables('functionName'))]"
      ],
      "properties": {
        "httpsOnly": true,
        "clientAffinityEnabled": true,
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "siteConfig": {
          "linuxFxVersion": "PowerShell|7.4",
          "alwaysOn": true
        }
      },
      "resources": [
        {
          "type": "config",
          "apiVersion": "2018-11-01",
          "name": "appsettings",
          "dependsOn": [ "[resourceId('Microsoft.Web/sites', variables('functionName'))]" ],
          "properties": {
            "FUNCTIONS_EXTENSION_VERSION": "~4",
            "FUNCTIONS_WORKER_RUNTIME": "powershell",
            "APPLICATIONINSIGHTS_CONNECTION_STRING": "[reference(resourceId('microsoft.insights/components', variables('functionName')), '2015-05-01').ConnectionString]",
            "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(resourceId('Microsoft.Insights/components', variables('functionName')), '2015-05-01').InstrumentationKey]",
            "AzureWebJobsStorage": "[concat('DefaultEndpointsProtocol=https;AccountName=', toLower(variables('storageAccountName')),';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value, ';EndpointSuffix=', toLower(variables('storageSuffix')))]",
            "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING": "[concat('DefaultEndpointsProtocol=https;AccountName=', toLower(variables('storageAccountName')),';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value, ';EndpointSuffix=', toLower(variables('storageSuffix')))]",
            "WEBSITE_CONTENTSHARE": "[variables('functionName')]",
            "WEBSITE_RUN_FROM_PACKAGE": "[variables('packageUri')]",
            "EXO_ORG": "[parameters('EXO_ORG')]"
          }
        }
      ]
    }
  ],
  "outputs": {
    "functionAppName": { "type": "string", "value": "[variables('functionName')]" },
    "runFromPackage": { "type": "string", "value": "[variables('packageUri')]" }
  }
}
